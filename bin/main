#!/usr/bin/env ruby

require_relative '../lib/board.rb'
require_relative '../lib/player.rb'

class TicTacToe
  def create_players(name1, name2)
    @players = [Player.new(name1), Player.new(name2)]
  end

  def create_board
    @board = Board.new
  end

  def print_board
    print @board.display_board
  end

  def pick_symbol(sym1, sym2)
    @players[0].pick_symbol(sym1)
    @players[1].pick_symbol(sym2)
  end

  def set_beginner
    beginner = gets.chomp.to_s
    until [@players[0].name, @players[1].name].include?(beginner)
      puts 'wrong input, Please insert correct player name: '
      beginner = gets.chomp.to_s
    end

    @players[0], @players[1] = @players[1], @players[0] unless beginner == @players[0].name
  end

  def put_current_player(step)
    @current_player = @players[step % 2]
  end

  def check_move(pick)
    (@board.symbol[pick] != ' ') || !(0..10).cover?(pick) ? true : false
  end

  def update_board(pick)
    @board.update_board(pick, @current_player)
  end

  def win_move?
    @win_triplets = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
    @win_triplets.each do |triplet|
      return true if [@board.symbol[triplet[0] - 1], @board.symbol[triplet[1] - 1],
                      @board.symbol[triplet[2] - 1]].all?(@current_player.sym) == true
    end
  end
end

# Game user interface

flag = 'Y'

while flag == 'Y'

  game = TicTacToe.new

  puts 'Hi, Welcome to TicTacToe game'

  puts 'Insert name of two players: '

  # Creating player object

  players = game.create_players(gets.chomp.to_s, gets.chomp.to_s)

  puts "Hi #{players[0].name} and #{players[1].name}, welcome to tictactoe game: "

  game.create_board

  game.print_board

  puts "Ok #{players[0].name} please pick your symbol: "

  sym1 = gets.chomp.to_s

  puts "Ok #{players[1].name} please pick your symbol: "

  sym2 = gets.chomp.to_s

  game.pick_symbol(sym1, sym2)

  puts "#{players[0].name} choses #{players[0].sym}"
  puts "#{players[1].name} choses #{players[1].sym}"

  i = 0

  puts 'Game is ready. Now pick the player for the first move: '

  game.set_beginner

  puts "#{players[0].name} will start'"

  while i < 9

    current_player = game.put_current_player(i)

    puts "@ #{current_player.name}, now your turn. Pick a cell which has available spot: "

    game.print_board

    pick = gets.chomp.to_i - 1

    while game.check_move(pick)
      puts 'wrong input. Please pick another cell no.: '
      pick = gets.chomp.to_i - 1
    end

    game.update_board(pick)

    game.print_board

    game_flag = 0

    if game.win_move? == true
      puts 'You made the winning move. You won!!!'
      game_flag = 1
    elsif i == 9
      puts 'Game ends with draw result'
    else
      puts "You picked cell no. #{pick + 1}"
    end

    break unless game_flag.zero?

    i += 1
  end

  puts 'Game is over. Would you like to continuue? (Y) or quit? (N): '

  flag = gets.chomp.to_s

end
