#!/usr/bin/env ruby

require_relative '../lib/board.rb'
require_relative '../lib/player.rb' 

class TicTacToe

  @@adj = [[2, 4, 5, 3, 7, 9], [1, 3, 5, 8], [2, 5, 6, 1, 7, 9], [1, 5, 7, 6], [1, 2, 3, 4, 6, 7, 8, 9], [3, 5, 9, 4], [4, 5, 8, 1, 3, 9], [5, 7, 9, 2], [5, 6, 8, 1, 3, 7]]
  @@adj2 = [[3, 7, 9], [8], [1, 7, 9], [6], [], [4], [1, 3, 9], [ 2], [1, 3, 7]]
  
  def create_players (name1, name2)      
    @players =[Player.new(name1), Player.new(name2)]
  end 

  def create_board  
    @board = Board.new
  end 

  def print_board 
    print @board.display_board    
  end 

  def pick_symbol(sym1, sym2)
    @players[0].pick_symbol(sym1) 
    @players[1].pick_symbol(sym2)
  end 

  def set_beginner
    beginner = gets.chomp.to_s
    until beginner == @players[0].name || beginner == @players[1].name      
      puts 'wrong input, Please insert correct player name: '    
      beginner = gets.chomp.to_s
    end 
  
    unless beginner == @players[0].name
      @players[0], @players[1] = @players[1], @players[0]
    end 
  end 

  def set_current_player(i)
    @current_player = @players[i%2]
  end

  def check_move(pick)
    return (@board.symbol[pick] != ' ') || !(0..10).cover?(pick) ? true : false
  end

  def update_board(pick) 
    @board.update_board(pick, @current_player)
  end 
  
  def win_move(pick, check)   
    
    if @@adj[pick-1].any?(check)
      diff = check - pick  
      if @@adj2[pick-1].any?(check)
        return (pick + check) / 2
      elsif diff == 1 
        return check%3 == 0 ? check - 2*diff : check + diff
      elsif diff.positive? && (check+diff) <= 9 && pick!=5
        return check+diff
      elsif diff.positive? 
        return check - 2*diff
      elsif diff == -1
        return check%3 == 1 ? check - 2*diff : check+diff
      elsif diff.negative? && (check+diff) > 0 && pick!=5
        return check+diff   
      elsif diff.negative?  
        return check - 2*diff                  
      end 
    else 
      return nil
    end 
  end 

  def win_move_all(pick)     
    win_move_array = []    
    @@adj[pick].each do |elem|    
      puts "Compared are: #{@current_player.sym} and #{@board.symbol[elem-1]}"
      puts "elem is #{elem}"
      unless  @current_player.sym != @board.symbol[elem-1]        
        win_move_array << win_move(pick + 1, elem) if @board.symbol[win_move(pick + 1, elem)-1] == ' '
      end       
    end 
    puts win_move_array
  end  

end 

# Game user interface 

game = TicTacToe.new

puts 'Hi, Welcome to TicTacToe game'

puts 'Insert name of two players: '

# Creating player object 

players = game.create_players(gets.chomp.to_s, gets.chomp.to_s) 

puts "Hi #{players[0].name} and #{players[1].name}, welcome to tictactoe game: "

game.create_board

game.print_board 

puts "Ok #{players[0].name} please pick your symbol: "

sym1 = gets.chomp.to_s 

puts "Ok #{players[1].name} please pick your symbol: "

sym2 = gets.chomp.to_s

game.pick_symbol(sym1, sym2)

puts "#{players[0].name} choses #{players[0].sym}"
puts "#{players[1].name} choses #{players[1].sym}"

flag = 'Y'

while flag == 'Y'

  i = 0

  puts 'Game is ready. Now pick the player for the first move: '  

  game.set_beginner

  puts "#{players[0].name} will start'"  

  while i < 9 

    current_player = game.set_current_player(i) 

    puts "@ #{current_player.name}, now your turn. Pick a cell which has available spot: "

    game.print_board      

    pick = gets.chomp.to_i - 1

    while game.check_move(pick) 
      puts 'wrong input. Please pick another cell no.: '
      pick = gets.chomp.to_i - 1
    end    

    game.update_board(pick)

    game.print_board        

    win_move_array1 = []
    win_move_array2 = []
    
    puts "The win moves are: "

    unless game.win_move_all(pick).nil?
      if i%2 == 0 
        win_move_array1 << game.win_move_all(pick)
      else 
        win_move_array2 << game.win_move_all(pick)
      end
    end 

    puts win_move_array1
    puts win_move_array2

    draw_move = 0
    draw_move = pick + 1 if i == 8

    game_flag = 0

    case pick.to_i
    when win_move_array1.any?
      puts 'You made the winning move. You won!!!'
      game_flag = 1
    when draw_move - 1
      puts 'Game ends with draw result'
    else
      puts "You picked cell no. #{pick + 1}"
    end

    break unless game_flag.zero?

    i += 1
  end

  puts 'Game is over. Would you like to continuue? (Y) or quit? (N): '

  flag = gets.chomp.to_s

end